---
- name: Include distribution version specific variables - RHEL/CentOS
  include_vars: "el{{ ansible_distribution_major_version }}.yml"
  when: ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

- name: Include distribution version specific variables - Fedora
  include_vars: "fedora{{ ansible_distribution_major_version }}.yml"
  when: ansible_distribution == 'Fedora'

- name: (RHEL) enable repositories
  include_tasks: rhel_repos.yml
  when: ansible_distribution == 'RedHat'

- name: (CentOS) enable repositories
  include_tasks: centos_repos.yml
  when: ansible_distribution == 'CentOS'

- name: Install packages from local media
  include_tasks: install_local_media.yml
  when: use_local_media|bool

- name: Install packages from system defined repositories
  include_tasks: install_normal.yml
  when: not use_local_media|bool

- name: Add hosts to /etc/hosts (using alternative interface)
  when:
    - cluster_etc_hosts | bool
  blockinfile:
    path: "/etc/hosts"
    block: |
      {{ item.ip }} {{ item.hostname }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.hostname }}"
    state: present
  loop: "{{ cluster_nodes }}"

- name: Create cluster system group
  group:
    name: "{{ cluster_group }}"
    state: 'present'

- name: Create cluster system user
  user:
    name: "{{ cluster_user }}"
    state: 'present'
    password: >-
      {{ cluster_user_pass |
      password_hash('sha512', ansible_hostname|replace('-','x') |
      truncate(16, True, '', 0)) }}
    groups: "{{ cluster_group }}"
    comment: 'HA Cluster Administrator'

- name: Enable/Disable PCSD web GUI
  lineinfile:
    dest: '/etc/sysconfig/pcsd'
    regexp: 'PCSD_DISABLE_GUI=.*'
    line: "PCSD_DISABLE_GUI={{ enable_pcsd_gui|bool|ternary('false','true') }}"
  when: enable_pcsd_gui != 'nochange'

- name: Enable and start PCSD service
  service:
    name: 'pcsd'
    enabled: true
    state: 'started'

- name: Setup firewall for RHEL/CentOS systems
  include_tasks: "firewall-el{{ ansible_distribution_major_version }}.yml"
  when:
    - cluster_firewall|bool
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

- name: Setup firewall for Fedora systems
  include_tasks: "firewall-fedora{{ ansible_distribution_major_version }}.yml"
  when: cluster_firewall|bool and ansible_distribution == 'Fedora'

- name: Authorize cluster nodes
  pcs_auth:
    node_name: "{{ item.hostname }}"
    username: "{{ cluster_user }}"
    password: "{{ cluster_user_pass }}"
  loop: "{{ cluster_nodes }}"
  when: cluster_control_node | bool

- name: Setup cluster
  pcs_cluster:
    node_list: >-
      {% for item in cluster_nodes %}
      {{ item.hostname }}
      {% endfor %}
    cluster_name: "{{ cluster_name }}"
    transport: "{{ cluster_transport }}"
    token: "{{ cluster_corosync_token | default(omit) }}"
    allowed_node_changes: "{% if allow_cluster_expansion|bool %}add{% else %}none{% endif %}"
  when: cluster_control_node | bool

- name: Start cluster services on all nodes
  service:
    name: "{{ item }}"
    state: 'started'
  with_items:
    - pacemaker
    - corosync
  when: not cluster_node_is_remote | bool

- name: Enable cluster services on boot
  service:
    name: "{{ item }}"
    enabled: true
  with_items:
    - pacemaker
    - corosync
  when:
    - cluster_enable_service | bool
    - not cluster_node_is_remote | bool

### fencing setup
- name: Setup automatic fence_xvm
  include_tasks: fence_xvm.yml
  when: cluster_configure_fence_xvm is defined and cluster_configure_fence_xvm|bool

- name: Setup fence_vmware_soap
  include_tasks: fence_vmware_soap.yml
  when: cluster_configure_fence_vmware_soap is defined and cluster_configure_fence_vmware_soap|bool

- name: Setup fence_kdump
  include_tasks: fence_kdump.yml
  when: cluster_configure_fence_kdump is defined and cluster_configure_fence_kdump|bool
